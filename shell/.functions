#!/bin/bash

# reload dot files
reloadDotFiles() {
	source ~/.zshrc
}

# create a zip file for changes since X commit or tag
# $1 from tag or hash
# $2 to tag or hash (optional, default HEAD)
makepatch() {
	local from=$1
	local to="${2:-HEAD}"

	if [[ -z $from ]]; then
		echo "You need to specify a commit or tag to compare from."
		return 1
	fi

	local currentname="$(pwd | xargs basename)"
	local zipname="${currentname}-(${from}-${to}).zip"

	echo ""
	echo "making ${zipname}"
	echo " -- $DOCUMENTS/${zipname}"
	echo ""

	git diff --name-only "${from}" "${to}" | zip "$DOCUMENTS/$zipname" -@
}

# fetch keys from github
fetchAuthKeys() {
        local gituser=jwbenson

        if ! type "wget" > /dev/null; then
                echo "wtf... wget isn't installed"
                return 1
        fi

        wget -O temp.keys "https://github.com/$gituser.keys" &&  \
        cat temp.keys > ~/.ssh/authorized_keys && \
        rm -f temp.keys
}

# Start a static HTTP server from a directory, optionally specifying the port
# $1 port number (default 9001)
staticserver() {
	# Get port (if specified)
	local port="${1:-9002}"

	# open in a browser
	sleep 1 && open "http://localhost:${port}/"

	# if statichttpserver npm module doesn't exist, use python
	if ! type "statichttpserver" > /dev/null; then

		# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
		# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
		python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"

		return 0
	fi

	statichttpserver -p="${port}"

}


awsmfa() {
	###########################
	# using a OTP password with AWS CLI can be kind of annoying
	# store AWS_MFA_SERIAL in your bash profile and then call ./awsmfa.sh <otp> from your authenticator
	#
	# requires jq
	#
	# example 
	#
	# $ ./awsmfa.sh 867530
	#
	# AWS ACCESS KEY ID ASI ... 
	# AWS EXPIRE 2021-03-03T06:30:40+00:00
	#
	###########################
	OTP="$1"
	AWSTOKEN="$AWS_MFA_SERIAL"

	if [ -n "$2" ]
	then
		AWSTOKEN=$2
	fi

	if [ ! -n "$AWSTOKEN" ]
	then
		echo "$0 - Error AWSTOKEN (\$2 OR \$AWS_MFA_SERIAL) not set or NULL"
		return 0
	fi

	if [ ! -n "$OTP" ]
	then
		echo "$0 - Error OTP (\$1) not set or NULL"
		return 0
	fi

	OTPVALUES=$(aws sts get-session-token --serial-number $AWSTOKEN --token-code $OTP)

	export AWS_ACCESS_KEY_ID=$( jq -r  '.Credentials.AccessKeyId' <<< "${OTPVALUES}")
	export AWS_SECRET_ACCESS_KEY=$( jq -r  '.Credentials.SecretAccessKey' <<< "${OTPVALUES}")
	export AWS_SESSION_TOKEN=$( jq -r  '.Credentials.SessionToken' <<< "${OTPVALUES}")
	export AWS_SESSION_EXPIRATION=$( jq -r  '.Credentials.Expiration' <<< "${OTPVALUES}")
	export AWS_DEFAULT_REGION=$(aws configure get region)

	echo "AWS TOKEN: $AWSTOKEN"
	echo "AWS ACCESS KEY ID $AWS_ACCESS_KEY_ID"
	echo "AWS EXPIRE $AWS_SESSION_EXPIRATION"
	echo "AWS DEFAULT REGION $AWS_DEFAULT_REGION"

	### update configs
	create-sts-user
}

create-sts-user() 
{
	if [ -z "$AWS_SESSION_TOKEN" ]
	then
		echo "invalid MFA session token!"
		return 0;
	fi

	# backup current configuration
	if [[ ! -d ~/.aws_bak ]] 
	then
		mkdir ~/.aws_bak
	fi

	cat ~/.aws/config > ~/.aws_bak/config
	cat ~/.aws/credentials > ~/.aws_bak/credentials

	# Insert sts-mfa-user into config
	BEFORE_MFA_USER=$(grep -o -B 500 '^### MFAUSERBEGIN' ~/.aws/config)
	AFTER_MFA_USER=$(grep -o -A 500 '^### MFAUSEREND' ~/.aws/config)

	if [ -z "$BEFORE_MFA_USER" ]
	then
		BEFORE_MFA_USER=$(cat ~/.aws/config)
		BEFORE_MFA_USER="$BEFORE_MFA_USER\n### MFAUSERBEGIN"
		AFTER_MFA_USER="### MFAUSEREND"
	fi

	echo $BEFORE_MFA_USER > ~/.aws/config
	echo "[profile sts-mfa-user]" >> ~/.aws/config
	echo "region = $AWS_DEFAULT_REGION" >> ~/.aws/config
	echo $AFTER_MFA_USER >> ~/.aws/config

	# insert sts-mfa-user into credentials
	BEFORE_MFA_USER=$(grep -o -B 500 '^### MFAUSERBEGIN' ~/.aws/credentials)
	AFTER_MFA_USER=$(grep -o -A 500 '^### MFAUSEREND' ~/.aws/credentials)
	
	if [ -z "$BEFORE_MFA_USER" ]
	then
		BEFORE_MFA_USER=$(cat ~/.aws/credentials)
		BEFORE_MFA_USER="$BEFORE_MFA_USER\n### MFAUSERBEGIN"
		AFTER_MFA_USER="### MFAUSEREND"
	fi

	echo $BEFORE_MFA_USER > ~/.aws/credentials
	echo "[sts-mfa-user]" >> ~/.aws/credentials
	echo "aws_access_key_id = $AWS_ACCESS_KEY_ID" >> ~/.aws/credentials
	echo "aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials
	echo "aws_session_token = $AWS_SESSION_TOKEN" >> ~/.aws/credentials
	echo $AFTER_MFA_USER >> ~/.aws/Credentials
	
	export AWS_PROFILE="sts-mfa-user"
	aws configure list
}

kubetail()
{
	NAMESPACE="$1"
	DEPLOYMENT="$2"

	if [ ! -n "$1" ]
	then
		NAMESPACE=$AWS_DEFAULT_K8S_NAMESPACE
	fi
	if [ ! -n "$2" ]
	then
		DEPLOYMENT=$AWS_DEFAULT_K8S_DEPLOYMENT
	fi

	echo "tailing ${NAMESPACE} - deployment.apps/${DEPLOYMENT}"
	kubectl -n "${NAMESPACE}" logs -f "deployment.apps/${DEPLOYMENT}"
}

appconfigs()
{
	ACTION=${ACTION:-list}
	BUCKET=${BUCKET:-$AWS_DEFAULT_K8S_BUCKET}
	FILE=""
	APPCONFIG_PATH="${HOME}/.sds/appconfigs/"
	NOT=""

  # converts --action get --bucket something to local vars
	while [ $# -gt 0 ]; do
		if [[ $1 == *"--"* ]]; then
					param="${1/--/}"
					param=$(echo ${param} | tr '[a-z]' '[A-Z]')
					declare ${param}="$2"
		fi
		shift
	done

	case $ACTION in
		get)
			aws s3 cp $BUCKET ${APPCONFIG_PATH} --recursive --exclude "*" --include "${FILE}"
			echo ""
			echo "downloaded ${APPCONFIG_PATH}${FILE} from ${BUCKET}"
			if [ "${FILE##*.}" = "yaml" ];
			then
				export APPCONFIG="${APPCONFIG_PATH}${FILE}"
				echo "APPCONFIG is now ${APPCONFIG}"
			else
				export KUBECONFIG="${APPCONFIG_PATH}${FILE}"
				echo "KUBECONFIG is now ${KUBECONFIG}"
			fi
			;;
		edit)
			code "${APPCONFIG_PATH}${CONFIG_FILE}"
			;;
		set)
			echo "Copying ${FILE} to ${BUCKET}"
			echo ""
			echo "Warning: this will overwrite application configuration!"
			echo ""
			read "REPLY?Are You Sure?"
			if [[ "$REPLY" =~ ^[Yy]$ ]]
			then
				echo "copying"
				cwd=$(pwd)
				cd ${APPCONFIG_PATH}
				aws s3 cp ${FILE} $BUCKET 
				cd $cwd
			fi
			;;
		*)
			if [ -n "$NOT" ]
			then
				echo "Available kubernetes configurations:"
				echo ""
				echo "(${BUCKET})"
				echo ""
				aws s3 ls $BUCKET --recursive | grep -v $NOT
			else
				echo "Available app configurations:"
				echo ""
				echo "(${BUCKET})"
				echo ""
				aws s3 ls $BUCKET --recursive
			fi
			echo ""
			echo ""
			echo "options:"
			echo "--bucket s3://bucket-name"
			echo "--action get|edit|set"
			echo "--file filename.yaml or environment_kubeconfig"
			;;
	esac
}

kubeconfigs()
{
	BUCKET=${BUCKET:-$AWS_DEFAULT_K8S_BUCKET}
	ACTION=${ACTION:-list}
	 # converts --action get --bucket something to local vars
	while [ $# -gt 0 ]; do
		if [[ $1 == *"--"* ]]; then
					param="${1/--/}"
					param=$(echo ${param} | tr '[a-z]' '[A-Z]')
					declare ${param}="$2"
		fi
		shift
	done

	appconfigs --not "yaml" --action $ACTION --bucket $BUCKET --file $FILE
}

ec2list () 
{
	aws ec2 describe-instances  \
		--query "Reservations[*].Instances[*].{InstanceType:InstanceType,PrivateIP:PrivateIpAddress,PublicIP:PublicIpAddress,Platform:Platform,Name:Tags[?Key=='Name']|[0].Value,Status:State.Name,CPU:CpuOptions.CoreCount,ThreadsPerCore:CpuOptions.ThreadsPerCore}" \
		--filters "Name=instance-state-name,Values=running" \
		--output table
}

ssmssh ()
{	
	if [[ -z $1 ]]; then
		echo "Error missing parameter:"
		echo "ssmssh <instance>"
		echo ""
		echo "Example:"
		echo "ssmssh i-00000000FFFFFFFFF"
		return 1
	fi
	aws ssm start-session --target $1
}

ssmforward ()
{	if [[ -z $3 ]]; then
		echo "Error missing parameter:"
		echo "ssmssh <instance> <remote> <local>"
		echo ""
		echo "Example:"
		echo "ssmssh i-00000000FFFFFFFFF 80 8080"
		return 1
	fi
	aws ssm start-session --target $1 --document-name AWS-StartPortForwardingSession --parameters "portNumber"="$2","localPortNumber"="$3"
}
