#!/bin/bash

# reload dot files
reloadDotFiles() {
	source ~/.bash_profile
}

# create a zip file for changes since X commit or tag
# $1 from tag or hash
# $2 to tag or hash (optional, default HEAD)
makepatch() {
	local from=$1
	local to="${2:-HEAD}"

	if [[ -z $from ]]; then
		echo "You need to specify a commit or tag to compare from."
		return 1
	fi

	local currentname="$(pwd | xargs basename)"
	local zipname="${currentname}-(${from}-${to}).zip"

	echo ""
	echo "making ${zipname}"
	echo " -- $DOCUMENTS/${zipname}"
	echo ""

	git diff --name-only "${from}" "${to}" | zip "$DOCUMENTS/$zipname" -@
}

# fetch keys from github
fetchAuthKeys() {
        local gituser=jwbenson

        if ! type "wget" > /dev/null; then
                echo "wtf... wget isn't installed"
                return 1
        fi

        wget -O temp.keys "https://github.com/$gituser.keys" &&  \
        cat temp.keys > ~/.ssh/authorized_keys && \
        rm -f temp.keys
}

# Start a static HTTP server from a directory, optionally specifying the port
# $1 port number (default 9001)
staticserver() {
	# Get port (if specified)
	local port="${1:-9002}"

	# open in a browser
	sleep 1 && open "http://localhost:${port}/"

	# if statichttpserver npm module doesn't exist, use python
	if ! type "statichttpserver" > /dev/null; then

		# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
		# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
		python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"

		return 0
	fi

	statichttpserver -p="${port}"

}

la() {
 ls -alf
}

awsmfa() {
	###########################
	# using a OTP password with AWS CLI can be kind of annoying
	# store AWS_MFA_SERIAL in your bash profile and then call ./awsmfa.sh <otp> from your authenticator
	#
	# requires jq
	#
	# example 
	#
	# $ ./awsmfa.sh 867530
	#
	# AWS ACCESS KEY ID ASI ... 
	# AWS EXPIRE 2021-03-03T06:30:40+00:00
	#
	###########################
	OTP="$1"
	AWSTOKEN="$AWS_MFA_SERIAL"

	if [ -n "$2" ]
	then
		AWSTOKEN=$2
	fi

	if [ ! -n "$AWSTOKEN" ]
	then
		echo "$0 - Error AWSTOKEN (\$2 OR \$AWS_MFA_SERIAL) not set or NULL"
		return 0
	fi

	if [ ! -n "$OTP" ]
	then
		echo "$0 - Error OTP (\$1) not set or NULL"
		return 0
	fi

	OTPVALUES=$(aws sts get-session-token --serial-number $AWSTOKEN --token-code $OTP)

	export AWS_ACCESS_KEY_ID=$( jq -r  '.Credentials.AccessKeyId' <<< "${OTPVALUES}")
	export AWS_SECRET_ACCESS_KEY=$( jq -r  '.Credentials.SecretAccessKey' <<< "${OTPVALUES}")
	export AWS_SESSION_TOKEN=$( jq -r  '.Credentials.SessionToken' <<< "${OTPVALUES}")
	export AWS_SESSION_EXPIRATION=$( jq -r  '.Credentials.Expiration' <<< "${OTPVALUES}")

	echo "AWS TOKEN: $AWSTOKEN"
	echo "AWS ACCESS KEY ID $AWS_ACCESS_KEY_ID"
	echo "AWS EXPIRE $AWS_SESSION_EXPIRATION"
}

kubeconfigs()
{
	ACTION="$1"
	CONFIG_FILE="$2"
	BUCKET="$3"
	KUBECONFIG_PATH="${HOME}/.sds/kubeconfig/"

	mkdir -p $KUBECONFIG_PATH

	if [ ! -n "$1" ]
	then
		ACTION="list"
	fi

	if [ ! -n "$BUCKET" ]
	then
		BUCKET=$AWS_DEFAULT_K8S_BUCKET
	fi

	case $ACTION in
		get)
			if [ ! -n "$CONFIG_FILE" ]
			then
				echo "Error: a config file name is required"
				exit
			fi
			aws s3 cp $BUCKET ${KUBECONFIG_PATH} --recursive --exclude "*" --include "${CONFIG_FILE}"
			export KUBECONFIG="${KUBECONFIG_PATH}${CONFIG_FILE}"
			echo "using KUBECONFIG=$KUBECONFIG"
			;;

		*)
			echo "Available kubeconfigs:"
			echo ""
			aws s3 ls $BUCKET --recursive | grep -v "yaml"
			echo ""
			echo ""
			echo "exec kubeconfigs get {config name} to update KUBECONFIG"
			;;
	esac
}

kubetail()
{
	NAMESPACE="$1"
	DEPLOYMENT="$2"

	if [ ! -n "$1" ]
	then
		NAMESPACE=$AWS_DEFAULT_K8S_NAMESPACE
	fi
	if [ ! -n "$2" ]
	then
		DEPLOYMENT=$AWS_DEFAULT_K8S_DEPLOYMENT
	fi

	echo "tailing ${NAMESPACE} - deployment.apps/${DEPLOYMENT}"
	kubectl -n "${NAMESPACE}" logs -f "deployment.apps/${DEPLOYMENT}"
}

appconfigs()
{
	ACTION="$1"
	CONFIG_FILE="$2"
	BUCKET="$3"
	APPCONFIG_PATH="${HOME}/.sds/appconfig/"

	mkdir -p $APPCONFIG_PATH

	if [ ! -n "$1" ]
	then
		ACTION="list"
	fi

	if [ ! -n "$BUCKET" ]
	then
		BUCKET=$AWS_DEFAULT_K8S_BUCKET
	fi

	if [ ! -n "$CONFIG_FILE" ]
	then
		ACTION="list"
	fi

	case $ACTION in
		get)
			aws s3 cp $BUCKET ${APPCONFIG_PATH} --recursive --exclude "*" --include "${CONFIG_FILE}"
			echo ""
			echo "downloaded ${APPCONFIG_PATH}${CONFIG_FILE}"
			export APPCONFIG="${APPCONFIG_PATH}${CONFIG_FILE}"
			;;
		edit)
			code "${APPCONFIG_PATH}${CONFIG_FILE}"
			;;
		set)
			echo "Copying ${CONFIG_FILE} to ${BUCKET}"
			echo ""
			echo "Warning: this will overwrite application configuration!"
			echo ""
			read -p "Are you sure? " -n 1 -r
			echo 
			if [[ $REPLY =~ ^[Yy]$ ]]
			then
				echo "copying"
				cwd=$(pwd)
				cd ${APPCONFIG_PATH}
				aws s3 cp ${CONFIG_FILE} $BUCKET 
				cd $cwd
			fi
			;;
		*)
			echo "Available appconfigs:"
			echo ""
			aws s3 ls $BUCKET --recursive | grep "yaml"
			echo ""
			echo ""
			echo "appconfigs get {config name} to download / overwrite a local configuration"
			echo "appconfigs edit {config name} to edit a local configuration"
			echo "appconfigs set {config name} to save / overwrite a remote configuration"
			;;
	esac
}
